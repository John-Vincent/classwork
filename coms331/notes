finite automata
--------------------------------------------------------------------------------
  Non-Deterministic Finite Automaton (NDFA)
--------------------------------------------------------------------------------
  Deterministic finite Automaton (DFA)
    deterministic finite automaton is a touple M = (Q,\Sigma, \delta, s_0, F) where
      Q is a finite set of states
      \Sigma is an alphabet
      \delta (Q x \Sigma) \to Q is the transition function
      s_0 \in Q is the initial state
      F \subeq Q is the set of final States(accepting states)
    \delta defines what is the next state, usually requires a table to define, basically a transition matrix.
    a directed graph is the best depiction of \delta

    look at prof notes for example of how to write the decomposition of a string for a DFA.

    language of dfa
      dfa's are used most often to define a language
      any language that is regular can be parsed by a DFA

    limits of DFA
      DFAs can not count, so they cant parse a language the requires n a's then m b's (n,m\in\mathbb{N})
      since they can not count they also can't match '()' or '{}'
--------------------------------------------------------------------------------
regular languages
  regular expressions:
  we define the language of regular expressions over \sigma recursively as:
    \null is a regular expression
--------------------------------------------------------------------------------
Automata plural automatan singular
something that reads an input and determains if it is within the language
an automota can be deterministic or nondeterministic based on whether in each
configuration exactly or at most one move is possible or not.
--------------------------------------------------------------------------------
grammers
a grammer G is defined as G = (V,T,S,P) where
V is a alphabet, called the variables,
T is an alphabet, v \and T = \null, called the terminal symbols
S\in V is the start variable
P \subseteq ((V\unionT)*\T*)x(V\untion T)*
grammers are how to define what is valid in a language
--------------------------------------------------------------------------------
formal language.
has a alphabet that is a finite set.
strings are a sequence of elements in the alphabet
\sigma ^n is the set of stings of length n
\lamda is the empty string
so \sigma ^0 = {\lamda}
\sigma ^* is the set of all strings over \sigma
\sigma ^0 \union \sigma ^1 ...
\sigma ^+ is the set of all strings over \sigma that are not empty
\sigma ^1 \union \sigma ^2 ...
--------------------------------------------------------------------------------
one-to-one: each element in the range has at most one element in the domain that
corresponds to it. f(1) = 5 so f(!1) != 5.

onto: each element in the range has at least one element in the domain that
corresponds to it.

bijection: a function is a bijection iff it is one-to-one, and onto, that is,
each element in the domain has exactly one corresponding element and vise versa.

two sets are equinumarious if there is a bijection between them.

look up countably vs uncountably infinite.

proof strategies:
  contradiction
  induction
    1) explicitly write doing induction on a variable
    2) the basis
    3) the hypothesis
    4) the inductive step
  pigeonhole principle
  diagonalization

prove if a graph has finite nodes and arbitrarily long paths it must contain
cycles, using pigeonhole principle.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~first day~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
website: http://web.cs.iastate.edu/~ciardo/
proof based class.
must use latex for all homework.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
